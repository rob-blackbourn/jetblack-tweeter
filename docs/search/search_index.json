{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A Python 3.8+ asyncio Twitter API. \u00b6 A Python 3.8 asyncio twitter client. This Twitter client is designed to support arbitrary HTTP clients. There is currently support for bareClient and aiohttp . Status \u00b6 This is work in progress, but functional. There is currently limited support for streaming, statuses and accounts. Only the 1.1 api is currently implemented.","title":"A Python 3.8+ asyncio Twitter API."},{"location":"#a-python-38-asyncio-twitter-api","text":"A Python 3.8 asyncio twitter client. This Twitter client is designed to support arbitrary HTTP clients. There is currently support for bareClient and aiohttp .","title":"A Python 3.8+ asyncio Twitter API."},{"location":"#status","text":"This is work in progress, but functional. There is currently limited support for streaming, statuses and accounts. Only the 1.1 api is currently implemented.","title":"Status"},{"location":"api/jetblack_tweeter.api/","text":"class Account \u00b6 Summary \u00b6 Initialise the account endpoint api jetblack_tweeter.api . Account ( client : AbstractHttpClient ) -> None Parameters \u00b6 client : AbstractHttpClient The authenticated client. async method Account . settings \u00b6 Summary \u00b6 Returns settings (including current trend, geo and sleep time Description \u00b6 information) for the authenticating user. async Account . settings ( ) -> Mapping[str, Any] Returns \u00b6 Mapping[str, Any] : The account settings. async method Account . verify_credentials \u00b6 Summary \u00b6 Returns an HTTP 200 OK response code and a representation of the Description \u00b6 requesting user if authentication was successful; returns a 401 status code and an error message if not. Use this method to test if supplied user credentials are valid. async Account . verify_credentials ( include_entities : Optional[bool] , skip_status : Optional[bool] , include_email : Optional[bool] ) -> Mapping[str, Any] Parameters \u00b6 include_entities : Optional[bool] (optional) The entities node will not be included when set to false. Defaults to None. skip_status : Optional[bool] (optional) When set to true statuses will not be included in the returned user object. Defaults to None. include_email : Optional[bool] (optional) When set to true email will be returned in the user objects as a string. If the user does not have an email address on their account, or if the email address is not verified, null will be returned. Defaults to None. Returns \u00b6 Mapping[str, Any] : User account details class Statuses \u00b6 Summary \u00b6 Initialise the statuses end point. jetblack_tweeter.api . Statuses ( client : AbstractHttpClient ) -> None Parameters \u00b6 client : AbstractHttpClient THe authenticated HTTP client async method Statuses . home_timeline \u00b6 Summary \u00b6 Returns a collection of the most recent Tweets and Retweets posted by Description \u00b6 the authenticating user and the users they follow. The home timeline is central to how most users interact with the Twitter service. async Statuses . home_timeline ( * , count : int , since_id : Optional[int] , max_id : Optional[int] , trim_user : bool , exclude_replies : bool , include_entities : bool ) -> Mapping[str, Any] Parameters \u00b6 count : int (optional) Specifies the number of records to retrieve. Must be less than or equal to 200. Defaults to 20. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. Defaults to 20. since_id : Optional[int] (optional) Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occurred since the since_id, the since_id will be forced to the oldest ID available. Defaults to None. max_id : Optional[int] (optional) Returns results with an ID less than (that is, older than) or equal to the specified ID. Defaults to None. trim_user : bool (optional) When true each Tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. Defaults to True. exclude_replies : bool (optional) This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count Tweets \u2014 this is because the count parameter retrieves that many Tweets before filtering out retweets and replies. Defaults to True. include_entities : bool (optional) The entities node will not be included when set to false. Defaults to False. Returns \u00b6 Mapping[str, Any] : The user timeline. async method Statuses . mentions_timeline \u00b6 Summary \u00b6 Returns the 20 most recent mentions (Tweets containing a users's Description \u00b6 @screen_name) for the authenticating user. async Statuses . mentions_timeline ( * , count : Optional[int] , since_id : Optional[int] , max_id : Optional[int] , trim_user : bool , include_entities : bool ) -> List[Mapping[str, Any]] Parameters \u00b6 count : Optional[int] (optional) Specifies the number of Tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method.. Defaults to None. since_id : Optional[int] (optional) Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occurred since the since_id, the since_id will be forced to the oldest ID available. Defaults to None. max_id : Optional[int] (optional) Returns results with an ID less than (that is, older than) or equal to the specified ID. Defaults to None. trim_user : bool (optional) When true each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. Defaults to True. include_entities : bool (optional) The entities node will not be included when set to false. Defaults to True. Returns \u00b6 List[Mapping[str, Any]] : The mentions timeline. async method Statuses . update \u00b6 Summary \u00b6 Updates the authenticating user's current status, also known as Description \u00b6 Tweeting. async Statuses . update ( status : str , * , in_reply_to_status_id : Optional[int] , auto_populate_reply_metadata : Optional[bool] , exclude_reply_user_ids : Optional[List[int]] , attachment_url : Optional[str] , media_ids : Optional[List[int]] , possibly_sensitive : Optional[bool] , lat : Optional[Union[int, float]] , long : Optional[Union[int, float]] , place_id : Optional[str] , display_coordinates : Optional[bool] , trim_user : Optional[bool] , enable_dmcommands : Optional[bool] , fail_dmcommands : Optional[bool] , card_uri : Optional[str] ) -> Optional[Mapping[str, Any]] Parameters \u00b6 status : str The text of the status update. URL encode as necessary. t.co link wrapping will affect character counts. in_reply_to_status_id : Optional[int] (optional) The ID of an existing status that the update is in reply to. Note: This parameter will be ignored unless the author of the Tweet this parameter references is mentioned within the status text. Therefore, you must include @username , where username is the author of the referenced Tweet, within the update. Defaults to None. auto_populate_reply_metadata : Optional[bool] (optional) If set to true and used with in_reply_to_status_id, leading @mentions will be looked up from the original Tweet, and added to the new Tweet from there. This wil append @mentions into the metadata of an extended Tweet as a reply chain grows, until the limit on @mentions is reached. In cases where the original Tweet has been deleted, the reply will fail. Defaults to None. exclude_reply_user_ids : Optional[List[int]] (optional) When used with auto_populate_reply_metadata, a comma-separated list of user ids which will be removed from the server-generated @mentions prefix on an extended Tweet. Note that the leading @mention cannot be removed as it would break the in-reply-to-status-id semantics. Attempting to remove it will be silently ignored. Defaults to None. attachment_url : Optional[str] (optional) In order for a URL to not be counted in the status body of an extended Tweet, provide a URL as a Tweet attachment. This URL must be a Tweet permalink, or Direct Message deep link. Arbitrary, non-Twitter URLs must remain in the status text. URLs passed to the attachment_url parameter not matching either a Tweet permalink or Direct Message deep link will fail at Tweet creation and cause an exception. Defaults to None. media_ids : Optional[List[int]] (optional) A comma-delimited list of media_ids to associate with the Tweet. You may include up to 4 photos or 1 animated GIF or 1 video in a Tweet. See Uploading Media for further details on uploading media. Defaults to None. possibly_sensitive : Optional[bool] (optional) If you upload Tweet media that might be considered sensitive content such as nudity, or medical procedures, you must set this value to true. See Media setting and best practices for more context. Defaults to None. lat : Optional[Union[int, float]] (optional) The latitude of the location this Tweet refers to. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there is no corresponding long parameter. Defaults to None. long : Optional[Union[int, float]] (optional) The longitude of the location this Tweet refers to. The valid ranges for longitude are -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there no corresponding lat parameter. Defaults to None. place_id : Optional[str] (optional) A place in the world. Defaults to None. display_coordinates : Optional[bool] (optional) Whether or not to put a pin on the exact coordinates a Tweet has been sent from. Defaults to None. trim_user : Optional[bool] (optional) When true the response will include a user object including only the author's ID. Omit this parameter to receive the complete user object. Defaults to None. enable_dmcommands : Optional[bool] (optional) When set to true, enables shortcode commands for sending Direct Messages as part of the status text to send a Direct Message to a user. When set to false, disables this behavior and includes any leading characters in the status text that is posted. Defaults to None. fail_dmcommands : Optional[bool] (optional) When set to true, causes any status text that starts with shortcode commands to return an API error. When set to false, allows shortcode commands to be sent in the status text and acted on by the API. Defaults to None. card_uri : Optional[str] (optional) Associate an ads card with the Tweet using the card_uri value from any ads card response. Defaults to None. Returns \u00b6 Optional[Mapping[str, Any]] : The tweet. async method Statuses . user_timeline \u00b6 Summary \u00b6 Returns a collection of the most recent Tweets posted by the user Description \u00b6 indicated by the screen_name or user_id parameters. async Statuses . user_timeline ( * , user_id : Optional[str] , screen_name : Optional[str] , since_id : Optional[int] , count : Optional[int] , max_id : Optional[int] , trim_user : bool , exclude_replies : bool , include_rts : bool ) -> List[Mapping[str, Any]] Parameters \u00b6 user_id : Optional[str] (optional) The ID of the user for whom to return results. Defaults to None. screen_name : Optional[str] (optional) The screen name of the user for whom to return results. Defaults to None. since_id : Optional[int] (optional) Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets that can be accessed through the API. If the limit of Tweets has occurred since the since_id, the since_id will be forced to the oldest ID available. Defaults to None. count : Optional[int] (optional) Specifies the number of Tweets to try and retrieve, up to a maximum of 200 per distinct request. The value of count is best thought of as a limit to the number of Tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method. Defaults to None. max_id : Optional[int] (optional) Returns results with an ID less than (that is, older than) or equal to the specified ID. Defaults to None. trim_user : bool (optional) When set to true each Tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. Defaults to True. exclude_replies : bool (optional) This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets \u2014 this is because the count parameter retrieves that many Tweets before filtering out retweets and replies. Defaults to True. include_rts : bool (optional) When set to false , the timeline will strip any native retweets (though they will still count toward both the maximal length of the timeline and the slice selected by the count parameter). Note: If you're using the trim_user parameter in conjunction with include_rts, the retweets will still contain a full user object. Defaults to False. Returns \u00b6 List[Mapping[str, Any]] : The user timeline. class Stream \u00b6 Summary \u00b6 Initialise the stream end endpoint jetblack_tweeter.api . Stream ( client : AbstractHttpClient ) -> None Parameters \u00b6 client : AbstractHttpClient An authenticated client. async generator method Stream . filter \u00b6 Summary \u00b6 Follow the statuses filtering api async Stream . filter ( * , follow : Optional[List[int]] , track : Optional[List[str]] , locations : Optional[List[BoundingBox]] , filter_level : FilterLevel , delimited : Optional[int] , stall_warnings : bool ) -> Any Parameters \u00b6 follow : Optional[List[int]] (optional) List of user ids to follow. Defaults to None. track : Optional[List[str]] (optional) List of keywords (or phrases) to track. Defaults to None. locations : Optional[List[BoundingBox]] (optional) List of bounding boxes to track. Defaults to None. filter_level : FilterLevel (optional) Filter status update frequency. Defaults to FilterLevel.NONE. delimited : Optional[int] (optional) Specifies whether messages should be length-delimited. Defaults None. stall_warnings : bool (optional) Whether or not to warn the caller about stalls when falling behind the twitter real time queue. Defaults to True. Yields \u00b6 Any : A status response async generator method Stream . sample \u00b6 Summary \u00b6 Retrieve a sampling of public statuses async Stream . sample ( ) -> Any Yields \u00b6 Any : A sample status response","title":"jetblack_tweeter.api"},{"location":"api/jetblack_tweeter.api/#class-account","text":"","title":"class Account"},{"location":"api/jetblack_tweeter.api/#summary","text":"Initialise the account endpoint api jetblack_tweeter.api . Account ( client : AbstractHttpClient ) -> None","title":"Summary"},{"location":"api/jetblack_tweeter.api/#parameters","text":"client : AbstractHttpClient The authenticated client.","title":"Parameters"},{"location":"api/jetblack_tweeter.api/#async-method-accountsettings","text":"","title":"async method Account.settings"},{"location":"api/jetblack_tweeter.api/#summary_1","text":"Returns settings (including current trend, geo and sleep time","title":"Summary"},{"location":"api/jetblack_tweeter.api/#description","text":"information) for the authenticating user. async Account . settings ( ) -> Mapping[str, Any]","title":"Description"},{"location":"api/jetblack_tweeter.api/#returns","text":"Mapping[str, Any] : The account settings.","title":"Returns"},{"location":"api/jetblack_tweeter.api/#async-method-accountverify_credentials","text":"","title":"async method Account.verify_credentials"},{"location":"api/jetblack_tweeter.api/#summary_2","text":"Returns an HTTP 200 OK response code and a representation of the","title":"Summary"},{"location":"api/jetblack_tweeter.api/#description_1","text":"requesting user if authentication was successful; returns a 401 status code and an error message if not. Use this method to test if supplied user credentials are valid. async Account . verify_credentials ( include_entities : Optional[bool] , skip_status : Optional[bool] , include_email : Optional[bool] ) -> Mapping[str, Any]","title":"Description"},{"location":"api/jetblack_tweeter.api/#parameters_1","text":"include_entities : Optional[bool] (optional) The entities node will not be included when set to false. Defaults to None. skip_status : Optional[bool] (optional) When set to true statuses will not be included in the returned user object. Defaults to None. include_email : Optional[bool] (optional) When set to true email will be returned in the user objects as a string. If the user does not have an email address on their account, or if the email address is not verified, null will be returned. Defaults to None.","title":"Parameters"},{"location":"api/jetblack_tweeter.api/#returns_1","text":"Mapping[str, Any] : User account details","title":"Returns"},{"location":"api/jetblack_tweeter.api/#class-statuses","text":"","title":"class Statuses"},{"location":"api/jetblack_tweeter.api/#summary_3","text":"Initialise the statuses end point. jetblack_tweeter.api . Statuses ( client : AbstractHttpClient ) -> None","title":"Summary"},{"location":"api/jetblack_tweeter.api/#parameters_2","text":"client : AbstractHttpClient THe authenticated HTTP client","title":"Parameters"},{"location":"api/jetblack_tweeter.api/#async-method-statuseshome_timeline","text":"","title":"async method Statuses.home_timeline"},{"location":"api/jetblack_tweeter.api/#summary_4","text":"Returns a collection of the most recent Tweets and Retweets posted by","title":"Summary"},{"location":"api/jetblack_tweeter.api/#description_2","text":"the authenticating user and the users they follow. The home timeline is central to how most users interact with the Twitter service. async Statuses . home_timeline ( * , count : int , since_id : Optional[int] , max_id : Optional[int] , trim_user : bool , exclude_replies : bool , include_entities : bool ) -> Mapping[str, Any]","title":"Description"},{"location":"api/jetblack_tweeter.api/#parameters_3","text":"count : int (optional) Specifies the number of records to retrieve. Must be less than or equal to 200. Defaults to 20. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. Defaults to 20. since_id : Optional[int] (optional) Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occurred since the since_id, the since_id will be forced to the oldest ID available. Defaults to None. max_id : Optional[int] (optional) Returns results with an ID less than (that is, older than) or equal to the specified ID. Defaults to None. trim_user : bool (optional) When true each Tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. Defaults to True. exclude_replies : bool (optional) This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count Tweets \u2014 this is because the count parameter retrieves that many Tweets before filtering out retweets and replies. Defaults to True. include_entities : bool (optional) The entities node will not be included when set to false. Defaults to False.","title":"Parameters"},{"location":"api/jetblack_tweeter.api/#returns_2","text":"Mapping[str, Any] : The user timeline.","title":"Returns"},{"location":"api/jetblack_tweeter.api/#async-method-statusesmentions_timeline","text":"","title":"async method Statuses.mentions_timeline"},{"location":"api/jetblack_tweeter.api/#summary_5","text":"Returns the 20 most recent mentions (Tweets containing a users's","title":"Summary"},{"location":"api/jetblack_tweeter.api/#description_3","text":"@screen_name) for the authenticating user. async Statuses . mentions_timeline ( * , count : Optional[int] , since_id : Optional[int] , max_id : Optional[int] , trim_user : bool , include_entities : bool ) -> List[Mapping[str, Any]]","title":"Description"},{"location":"api/jetblack_tweeter.api/#parameters_4","text":"count : Optional[int] (optional) Specifies the number of Tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method.. Defaults to None. since_id : Optional[int] (optional) Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occurred since the since_id, the since_id will be forced to the oldest ID available. Defaults to None. max_id : Optional[int] (optional) Returns results with an ID less than (that is, older than) or equal to the specified ID. Defaults to None. trim_user : bool (optional) When true each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. Defaults to True. include_entities : bool (optional) The entities node will not be included when set to false. Defaults to True.","title":"Parameters"},{"location":"api/jetblack_tweeter.api/#returns_3","text":"List[Mapping[str, Any]] : The mentions timeline.","title":"Returns"},{"location":"api/jetblack_tweeter.api/#async-method-statusesupdate","text":"","title":"async method Statuses.update"},{"location":"api/jetblack_tweeter.api/#summary_6","text":"Updates the authenticating user's current status, also known as","title":"Summary"},{"location":"api/jetblack_tweeter.api/#description_4","text":"Tweeting. async Statuses . update ( status : str , * , in_reply_to_status_id : Optional[int] , auto_populate_reply_metadata : Optional[bool] , exclude_reply_user_ids : Optional[List[int]] , attachment_url : Optional[str] , media_ids : Optional[List[int]] , possibly_sensitive : Optional[bool] , lat : Optional[Union[int, float]] , long : Optional[Union[int, float]] , place_id : Optional[str] , display_coordinates : Optional[bool] , trim_user : Optional[bool] , enable_dmcommands : Optional[bool] , fail_dmcommands : Optional[bool] , card_uri : Optional[str] ) -> Optional[Mapping[str, Any]]","title":"Description"},{"location":"api/jetblack_tweeter.api/#parameters_5","text":"status : str The text of the status update. URL encode as necessary. t.co link wrapping will affect character counts. in_reply_to_status_id : Optional[int] (optional) The ID of an existing status that the update is in reply to. Note: This parameter will be ignored unless the author of the Tweet this parameter references is mentioned within the status text. Therefore, you must include @username , where username is the author of the referenced Tweet, within the update. Defaults to None. auto_populate_reply_metadata : Optional[bool] (optional) If set to true and used with in_reply_to_status_id, leading @mentions will be looked up from the original Tweet, and added to the new Tweet from there. This wil append @mentions into the metadata of an extended Tweet as a reply chain grows, until the limit on @mentions is reached. In cases where the original Tweet has been deleted, the reply will fail. Defaults to None. exclude_reply_user_ids : Optional[List[int]] (optional) When used with auto_populate_reply_metadata, a comma-separated list of user ids which will be removed from the server-generated @mentions prefix on an extended Tweet. Note that the leading @mention cannot be removed as it would break the in-reply-to-status-id semantics. Attempting to remove it will be silently ignored. Defaults to None. attachment_url : Optional[str] (optional) In order for a URL to not be counted in the status body of an extended Tweet, provide a URL as a Tweet attachment. This URL must be a Tweet permalink, or Direct Message deep link. Arbitrary, non-Twitter URLs must remain in the status text. URLs passed to the attachment_url parameter not matching either a Tweet permalink or Direct Message deep link will fail at Tweet creation and cause an exception. Defaults to None. media_ids : Optional[List[int]] (optional) A comma-delimited list of media_ids to associate with the Tweet. You may include up to 4 photos or 1 animated GIF or 1 video in a Tweet. See Uploading Media for further details on uploading media. Defaults to None. possibly_sensitive : Optional[bool] (optional) If you upload Tweet media that might be considered sensitive content such as nudity, or medical procedures, you must set this value to true. See Media setting and best practices for more context. Defaults to None. lat : Optional[Union[int, float]] (optional) The latitude of the location this Tweet refers to. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there is no corresponding long parameter. Defaults to None. long : Optional[Union[int, float]] (optional) The longitude of the location this Tweet refers to. The valid ranges for longitude are -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there no corresponding lat parameter. Defaults to None. place_id : Optional[str] (optional) A place in the world. Defaults to None. display_coordinates : Optional[bool] (optional) Whether or not to put a pin on the exact coordinates a Tweet has been sent from. Defaults to None. trim_user : Optional[bool] (optional) When true the response will include a user object including only the author's ID. Omit this parameter to receive the complete user object. Defaults to None. enable_dmcommands : Optional[bool] (optional) When set to true, enables shortcode commands for sending Direct Messages as part of the status text to send a Direct Message to a user. When set to false, disables this behavior and includes any leading characters in the status text that is posted. Defaults to None. fail_dmcommands : Optional[bool] (optional) When set to true, causes any status text that starts with shortcode commands to return an API error. When set to false, allows shortcode commands to be sent in the status text and acted on by the API. Defaults to None. card_uri : Optional[str] (optional) Associate an ads card with the Tweet using the card_uri value from any ads card response. Defaults to None.","title":"Parameters"},{"location":"api/jetblack_tweeter.api/#returns_4","text":"Optional[Mapping[str, Any]] : The tweet.","title":"Returns"},{"location":"api/jetblack_tweeter.api/#async-method-statusesuser_timeline","text":"","title":"async method Statuses.user_timeline"},{"location":"api/jetblack_tweeter.api/#summary_7","text":"Returns a collection of the most recent Tweets posted by the user","title":"Summary"},{"location":"api/jetblack_tweeter.api/#description_5","text":"indicated by the screen_name or user_id parameters. async Statuses . user_timeline ( * , user_id : Optional[str] , screen_name : Optional[str] , since_id : Optional[int] , count : Optional[int] , max_id : Optional[int] , trim_user : bool , exclude_replies : bool , include_rts : bool ) -> List[Mapping[str, Any]]","title":"Description"},{"location":"api/jetblack_tweeter.api/#parameters_6","text":"user_id : Optional[str] (optional) The ID of the user for whom to return results. Defaults to None. screen_name : Optional[str] (optional) The screen name of the user for whom to return results. Defaults to None. since_id : Optional[int] (optional) Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets that can be accessed through the API. If the limit of Tweets has occurred since the since_id, the since_id will be forced to the oldest ID available. Defaults to None. count : Optional[int] (optional) Specifies the number of Tweets to try and retrieve, up to a maximum of 200 per distinct request. The value of count is best thought of as a limit to the number of Tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method. Defaults to None. max_id : Optional[int] (optional) Returns results with an ID less than (that is, older than) or equal to the specified ID. Defaults to None. trim_user : bool (optional) When set to true each Tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. Defaults to True. exclude_replies : bool (optional) This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets \u2014 this is because the count parameter retrieves that many Tweets before filtering out retweets and replies. Defaults to True. include_rts : bool (optional) When set to false , the timeline will strip any native retweets (though they will still count toward both the maximal length of the timeline and the slice selected by the count parameter). Note: If you're using the trim_user parameter in conjunction with include_rts, the retweets will still contain a full user object. Defaults to False.","title":"Parameters"},{"location":"api/jetblack_tweeter.api/#returns_5","text":"List[Mapping[str, Any]] : The user timeline.","title":"Returns"},{"location":"api/jetblack_tweeter.api/#class-stream","text":"","title":"class Stream"},{"location":"api/jetblack_tweeter.api/#summary_8","text":"Initialise the stream end endpoint jetblack_tweeter.api . Stream ( client : AbstractHttpClient ) -> None","title":"Summary"},{"location":"api/jetblack_tweeter.api/#parameters_7","text":"client : AbstractHttpClient An authenticated client.","title":"Parameters"},{"location":"api/jetblack_tweeter.api/#async-generator-method-streamfilter","text":"","title":"async generator method Stream.filter"},{"location":"api/jetblack_tweeter.api/#summary_9","text":"Follow the statuses filtering api async Stream . filter ( * , follow : Optional[List[int]] , track : Optional[List[str]] , locations : Optional[List[BoundingBox]] , filter_level : FilterLevel , delimited : Optional[int] , stall_warnings : bool ) -> Any","title":"Summary"},{"location":"api/jetblack_tweeter.api/#parameters_8","text":"follow : Optional[List[int]] (optional) List of user ids to follow. Defaults to None. track : Optional[List[str]] (optional) List of keywords (or phrases) to track. Defaults to None. locations : Optional[List[BoundingBox]] (optional) List of bounding boxes to track. Defaults to None. filter_level : FilterLevel (optional) Filter status update frequency. Defaults to FilterLevel.NONE. delimited : Optional[int] (optional) Specifies whether messages should be length-delimited. Defaults None. stall_warnings : bool (optional) Whether or not to warn the caller about stalls when falling behind the twitter real time queue. Defaults to True.","title":"Parameters"},{"location":"api/jetblack_tweeter.api/#yields","text":"Any : A status response","title":"Yields"},{"location":"api/jetblack_tweeter.api/#async-generator-method-streamsample","text":"","title":"async generator method Stream.sample"},{"location":"api/jetblack_tweeter.api/#summary_10","text":"Retrieve a sampling of public statuses async Stream . sample ( ) -> Any","title":"Summary"},{"location":"api/jetblack_tweeter.api/#yields_1","text":"Any : A sample status response","title":"Yields"},{"location":"api/jetblack_tweeter.tweeter/","text":"","title":"jetblack_tweeter"},{"location":"user-guide/getting-started/","text":"Getting Started \u00b6 Here is an example: import asyncio import os from jetblack_tweeter import Tweeter from jetblack_tweeter.clients.bareclient import BareTweeterSession # Get the secrets from environment variables. APP_KEY = os . environ [ \"APP_KEY\" ] APP_KEY_SECRET = os . environ [ \"APP_KEY_SECRET\" ] ACCESS_TOKEN = os . environ [ \"ACCESS_TOKEN\" ] ACCESS_TOKEN_SECRET = os . environ [ \"ACCESS_TOKEN_SECRET\" ] async def main (): tweeter = Tweeter ( BareTweeterSession (), APP_KEY , APP_KEY_SECRET , # Optional for user authentication. access_token = ACCESS_TOKEN , access_token_secret = ACCESS_TOKEN_SECRET ) user_timeline = await tweeter . statuses . user_timeline () print ( user_timeline ) account_settings = await tweeter . account . settings () print ( account_settings ) account_verify_credentials = await tweeter . account . verify_credentials () print ( account_verify_credentials ) # Watch the random sampling of tweets chosen by twitter async for tweet in tweeter . stream . sample (): print ( tweet ) # Stream tweets which have the tag \"#python\" from New York # and San Francisco. async for tweet in tweeter . stream . filter ( track = [ '#python' ], locations = [ (( - 122.75 , 36.8 ), ( - 121.75 , 37.8 )), (( - 74 , 40 ), ( - 73 , 41 )) ] ): print ( tweet ) result = await tweeter . statuses . update ( 'Hello from jetblack-tweeter' ) print ( result ) if __name__ == '__main__' : asyncio . run ( main ())","title":"Getting Started"},{"location":"user-guide/getting-started/#getting-started","text":"Here is an example: import asyncio import os from jetblack_tweeter import Tweeter from jetblack_tweeter.clients.bareclient import BareTweeterSession # Get the secrets from environment variables. APP_KEY = os . environ [ \"APP_KEY\" ] APP_KEY_SECRET = os . environ [ \"APP_KEY_SECRET\" ] ACCESS_TOKEN = os . environ [ \"ACCESS_TOKEN\" ] ACCESS_TOKEN_SECRET = os . environ [ \"ACCESS_TOKEN_SECRET\" ] async def main (): tweeter = Tweeter ( BareTweeterSession (), APP_KEY , APP_KEY_SECRET , # Optional for user authentication. access_token = ACCESS_TOKEN , access_token_secret = ACCESS_TOKEN_SECRET ) user_timeline = await tweeter . statuses . user_timeline () print ( user_timeline ) account_settings = await tweeter . account . settings () print ( account_settings ) account_verify_credentials = await tweeter . account . verify_credentials () print ( account_verify_credentials ) # Watch the random sampling of tweets chosen by twitter async for tweet in tweeter . stream . sample (): print ( tweet ) # Stream tweets which have the tag \"#python\" from New York # and San Francisco. async for tweet in tweeter . stream . filter ( track = [ '#python' ], locations = [ (( - 122.75 , 36.8 ), ( - 121.75 , 37.8 )), (( - 74 , 40 ), ( - 73 , 41 )) ] ): print ( tweet ) result = await tweeter . statuses . update ( 'Hello from jetblack-tweeter' ) print ( result ) if __name__ == '__main__' : asyncio . run ( main ())","title":"Getting Started"},{"location":"user-guide/installation/","text":"installation \u00b6 Install with pip , specifying the HTTP backend you wish to use. For bareClient: pip install jetblack-tweeter [ bareclient ] For aiohttp: pip install jetblack-tweeter [ aiohttp ]","title":"installation"},{"location":"user-guide/installation/#installation","text":"Install with pip , specifying the HTTP backend you wish to use. For bareClient: pip install jetblack-tweeter [ bareclient ] For aiohttp: pip install jetblack-tweeter [ aiohttp ]","title":"installation"}]}