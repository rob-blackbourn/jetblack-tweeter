{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A Python 3.8+ asyncio Twitter API \u00b6 A Python 3.8 asyncio twitter client. This Twitter client is designed to support arbitrary HTTP clients. There is currently support for bareClient and aiohttp . Status \u00b6 This is work in progress, but functional. There is currently limited support for streaming, statuses and accounts. Only the 1.1 api is currently implemented.","title":"A Python 3.8+ asyncio Twitter API"},{"location":"#a-python-38-asyncio-twitter-api","text":"A Python 3.8 asyncio twitter client. This Twitter client is designed to support arbitrary HTTP clients. There is currently support for bareClient and aiohttp .","title":"A Python 3.8+ asyncio Twitter API"},{"location":"#status","text":"This is work in progress, but functional. There is currently limited support for streaming, statuses and accounts. Only the 1.1 api is currently implemented.","title":"Status"},{"location":"api/jetblack_tweeter.api/","text":"class Account \u00b6 Summary \u00b6 Initialise the account endpoint api jetblack_tweeter.api . Account ( client : AbstractHttpClient ) -> None Parameters \u00b6 client : AbstractHttpClient The authenticated client. async method Account . settings \u00b6 Summary \u00b6 Returns settings (including current trend, geo and sleep time Description \u00b6 information) for the authenticating user. async Account . settings ( timeout : Optional[float] ) -> Mapping[str, Any] Parameters \u00b6 timeout : Optional[float] (optional) If specified the timeout for the request. Defaults to None. Returns \u00b6 Mapping[str, Any] : The account settings. async method Account . verify_credentials \u00b6 Summary \u00b6 Returns an HTTP 200 OK response code and a representation of the Description \u00b6 requesting user if authentication was successful; returns a 401 status code and an error message if not. Use this method to test if supplied user credentials are valid. async Account . verify_credentials ( include_entities : Optional[bool] , skip_status : Optional[bool] , include_email : Optional[bool] , timeout : Optional[float] ) -> Mapping[str, Any] Parameters \u00b6 include_entities : Optional[bool] (optional) The entities node will not be included when set to false. Defaults to None. skip_status : Optional[bool] (optional) When set to true statuses will not be included in the returned user object. Defaults to None. include_email : Optional[bool] (optional) When set to true email will be returned in the user objects as a string. If the user does not have an email address on their account, or if the email address is not verified, null will be returned. Defaults to None. timeout : Optional[float] (optional) If specified the timeout for the request. Defaults to None. Returns \u00b6 Mapping[str, Any] : User account details class Search \u00b6 Summary \u00b6 Initialise the search endpoint api jetblack_tweeter.api . Search ( client : AbstractHttpClient ) -> None Parameters \u00b6 client : AbstractHttpClient The authenticated client. async method Search . tweets \u00b6 Summary \u00b6 Returns a collection of relevant Tweets matching a specified query. async Search . tweets ( q : str , * , geocode : Optional[Tuple[Number, Number, str]] , lang : Optional[str] , locale : Optional[str] , result_type : Optional[SearchResultType] , count : Optional[int] , until : Optional[date] , since_id : Optional[int] , max_id : Optional[int] , include_entities : Optional[bool] , timeout : Optional[float] ) -> List[Mapping[str, Any]] Parameters \u00b6 q : str A UTF-8, URL-encoded search query of 500 characters maximum, including operators. Queries may additionally be limited by complexity. geocode : Optional[Tuple[Number, Number, str]] (optional) Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by \"latitude,longitude,radius\", where radius units must be specified as either \"mi\" (miles) or \"km\" (kilometers). Note that you cannot use the near operator via the API to geocode arbitrary locations; however you can use this geocode parameter to search near geocodes directly. A maximum of 1,000 distinct \"sub-regions\" will be considered when using the radius modifier. Defaults to None. lang : Optional[str] (optional) Restricts tweets to the given language, given by an ISO 639-1 code. Language detection is best-effort. Defaults to None. locale : Optional[str] (optional) Specify the language of the query you are sending (only ja is currently effective). This is intended for language-specific consumers and the default should work in the majority of cases. Defaults to None. result_type : Optional[SearchResultType] (optional) Specifies what type of search results you would prefer to receive. The current default is \"mixed\". Defaults to None. count : Optional[int] (optional) The number of tweets to return per page, 15 if unspecified, up to a maximum of 100. Defaults to None. until : Optional[date] (optional) Returns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Keep in mind that the search index has a 7-day limit. In other words, no tweets will be found for a date older than one week. Defaults to None. since_id : Optional[int] (optional) Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occurred since the since_id, the since_id will be forced to the oldest ID available. Defaults to None. max_id : Optional[int] (optional) Returns results with an ID less than (that is, older than) or equal to the specified ID. Defaults to None. include_entities : Optional[bool] (optional) The entities node will not be included when set to false. Defaults to None. timeout : Optional[float] (optional) If specified the timeout for the request. Defaults to None. Returns \u00b6 List[Mapping[str, Any]] : A list of matching tweets. class Statuses \u00b6 Summary \u00b6 Initialise the statuses end point. jetblack_tweeter.api . Statuses ( client : AbstractHttpClient ) -> None Parameters \u00b6 client : AbstractHttpClient THe authenticated HTTP client async method Statuses . destroy \u00b6 Summary \u00b6 Destroys the status specified by the required ID parameter. The Description \u00b6 authenticating user must be the author of the specified status. Returns the destroyed status if successful. async Statuses . destroy ( status_id : int , * , trim_user : Optional[bool] , timeout : Optional[float] ) -> Mapping[str, Any] Parameters \u00b6 status_id : int The numerical ID of the desired status. trim_user : Optional[bool] (optional) When set true each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. Defaults to None. timeout : Optional[float] (optional) If specified the timeout for the request. Defaults to None. Returns \u00b6 Mapping[str, Any] : THe deleted tweet. async method Statuses . home_timeline \u00b6 Summary \u00b6 Returns a collection of the most recent Tweets and Retweets posted by Description \u00b6 the authenticating user and the users they follow. The home timeline is central to how most users interact with the Twitter service. async Statuses . home_timeline ( * , count : int , since_id : Optional[int] , max_id : Optional[int] , trim_user : bool , exclude_replies : bool , include_entities : bool , timeout : Optional[float] ) -> Mapping[str, Any] Parameters \u00b6 count : int (optional) Specifies the number of records to retrieve. Must be less than or equal to 200. Defaults to 20. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. Defaults to 20. since_id : Optional[int] (optional) Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occurred since the since_id, the since_id will be forced to the oldest ID available. Defaults to None. max_id : Optional[int] (optional) Returns results with an ID less than (that is, older than) or equal to the specified ID. Defaults to None. trim_user : bool (optional) When true each Tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. Defaults to True. exclude_replies : bool (optional) This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count Tweets \u2014 this is because the count parameter retrieves that many Tweets before filtering out retweets and replies. Defaults to True. include_entities : bool (optional) The entities node will not be included when set to false. Defaults to False. timeout : Optional[float] (optional) If specified the timeout for the request. Defaults to None. Returns \u00b6 Mapping[str, Any] : The user timeline. async method Statuses . lookup \u00b6 Summary \u00b6 Returns fully-hydrated Tweet objects for up to 100 Tweets per Description \u00b6 request, as specified by comma-separated values passed to the ids parameter. async Statuses . lookup ( ids : List[int] , * , include_entities : Optional[bool] , trim_user : Optional[bool] , map : Optional[bool] , include_ext_alt_text : Optional[bool] , include_card_uri : Optional[bool] , timeout : Optional[float] ) -> List[Mapping[str, Any]] Parameters \u00b6 ids : List[int] A list of Tweet IDs, up to 100 are allowed in a single request. include_entities : Optional[bool] (optional) The entities node that may appear within embedded statuses will not be included when set to false. Defaults to None. trim_user : Optional[bool] (optional) When set to true each Tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. Defaults to None. map : Optional[bool] (optional) When using the map parameter, Tweets that do not exist or cannot be viewed by the current user will still have their key represented but with an explicitly null value paired with it. Defaults to None. include_ext_alt_text : Optional[bool] (optional) If alt text has been added to any attached media entities, this parameter will return an ext_alt_text value in the top-level key for the media entity. If no value has been set, this will be returned as null. Defaults to None. include_card_uri : Optional[bool] (optional) When set to true each Tweet returned will include a card_uri attribute when there is an ads card attached to the Tweet and when that card was attached using the card_uri value. Defaults to None. timeout : Optional[float] (optional) If specified the timeout for the request. Defaults to None. Returns \u00b6 List[Mapping[str, Any]] : A list of tweets. async method Statuses . mentions_timeline \u00b6 Summary \u00b6 Returns the 20 most recent mentions (Tweets containing a users's Description \u00b6 @screen_name) for the authenticating user. async Statuses . mentions_timeline ( * , count : Optional[int] , since_id : Optional[int] , max_id : Optional[int] , trim_user : bool , include_entities : bool , timeout : Optional[float] ) -> List[Mapping[str, Any]] Parameters \u00b6 count : Optional[int] (optional) Specifies the number of Tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method.. Defaults to None. since_id : Optional[int] (optional) Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occurred since the since_id, the since_id will be forced to the oldest ID available. Defaults to None. max_id : Optional[int] (optional) Returns results with an ID less than (that is, older than) or equal to the specified ID. Defaults to None. trim_user : bool (optional) When true each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. Defaults to True. include_entities : bool (optional) The entities node will not be included when set to false. Defaults to True. timeout : Optional[float] (optional) If specified the timeout for the request. Defaults to None. Returns \u00b6 List[Mapping[str, Any]] : The mentions timeline. async method Statuses . oembed \u00b6 Summary \u00b6 Returns a single Tweet, specified by either a Tweet web URL or the Description \u00b6 Tweet ID, in an oEmbed-compatible format. async Statuses . oembed ( url : str , * , maxwidth : Optional[int] , hide_media : Optional[bool] , hide_thread : Optional[bool] , omit_script : Optional[bool] , align : Optional[Alignment] , related : Optional[List[str]] , lang : Optional[str] , theme : Optional[Theme] , link_color : Optional[str] , widget_type : Optional[WidgetType] , dnt : Optional[bool] , timeout : Optional[float] ) -> Mapping[str, Any] Parameters \u00b6 url : str The URL of the Tweet to be embedded maxwidth : Optional[int] (optional) The maximum width of a rendered Tweet in whole pixels. A supplied value under or over the allowed range will be returned as the minimum or maximum supported width respectively; the reset width value will be reflected in the returned width property. Note that Twitter does not support the oEmbed maxheight parameter. Tweets are fundamentally text, and are therefore of unpredictable height that cannot be scaled like an image or video. Relatedly, the oEmbed response will not provide a value for height. Implementations that need consistent heights for Tweets should refer to the hide_thread and hide_media parameters below. Defaults to None. hide_media : Optional[bool] (optional) When set to true links in a Tweet are not expanded to photo, video, or link previews. Defaults to None. hide_thread : Optional[bool] (optional) When set to true a collapsed version of the previous Tweet in a conversation thread will not be displayed when the requested Tweet is in reply to another Tweet. Defaults to None. omit_script : Optional[bool] (optional) When set to true the","title":"jetblack_tweeter.api"},{"location":"api/jetblack_tweeter.api/#class-account","text":"","title":"class Account"},{"location":"api/jetblack_tweeter.api/#summary","text":"Initialise the account endpoint api jetblack_tweeter.api . Account ( client : AbstractHttpClient ) -> None","title":"Summary"},{"location":"api/jetblack_tweeter.api/#parameters","text":"client : AbstractHttpClient The authenticated client.","title":"Parameters"},{"location":"api/jetblack_tweeter.api/#async-method-accountsettings","text":"","title":"async method Account.settings"},{"location":"api/jetblack_tweeter.api/#summary_1","text":"Returns settings (including current trend, geo and sleep time","title":"Summary"},{"location":"api/jetblack_tweeter.api/#description","text":"information) for the authenticating user. async Account . settings ( timeout : Optional[float] ) -> Mapping[str, Any]","title":"Description"},{"location":"api/jetblack_tweeter.api/#parameters_1","text":"timeout : Optional[float] (optional) If specified the timeout for the request. Defaults to None.","title":"Parameters"},{"location":"api/jetblack_tweeter.api/#returns","text":"Mapping[str, Any] : The account settings.","title":"Returns"},{"location":"api/jetblack_tweeter.api/#async-method-accountverify_credentials","text":"","title":"async method Account.verify_credentials"},{"location":"api/jetblack_tweeter.api/#summary_2","text":"Returns an HTTP 200 OK response code and a representation of the","title":"Summary"},{"location":"api/jetblack_tweeter.api/#description_1","text":"requesting user if authentication was successful; returns a 401 status code and an error message if not. Use this method to test if supplied user credentials are valid. async Account . verify_credentials ( include_entities : Optional[bool] , skip_status : Optional[bool] , include_email : Optional[bool] , timeout : Optional[float] ) -> Mapping[str, Any]","title":"Description"},{"location":"api/jetblack_tweeter.api/#parameters_2","text":"include_entities : Optional[bool] (optional) The entities node will not be included when set to false. Defaults to None. skip_status : Optional[bool] (optional) When set to true statuses will not be included in the returned user object. Defaults to None. include_email : Optional[bool] (optional) When set to true email will be returned in the user objects as a string. If the user does not have an email address on their account, or if the email address is not verified, null will be returned. Defaults to None. timeout : Optional[float] (optional) If specified the timeout for the request. Defaults to None.","title":"Parameters"},{"location":"api/jetblack_tweeter.api/#returns_1","text":"Mapping[str, Any] : User account details","title":"Returns"},{"location":"api/jetblack_tweeter.api/#class-search","text":"","title":"class Search"},{"location":"api/jetblack_tweeter.api/#summary_3","text":"Initialise the search endpoint api jetblack_tweeter.api . Search ( client : AbstractHttpClient ) -> None","title":"Summary"},{"location":"api/jetblack_tweeter.api/#parameters_3","text":"client : AbstractHttpClient The authenticated client.","title":"Parameters"},{"location":"api/jetblack_tweeter.api/#async-method-searchtweets","text":"","title":"async method Search.tweets"},{"location":"api/jetblack_tweeter.api/#summary_4","text":"Returns a collection of relevant Tweets matching a specified query. async Search . tweets ( q : str , * , geocode : Optional[Tuple[Number, Number, str]] , lang : Optional[str] , locale : Optional[str] , result_type : Optional[SearchResultType] , count : Optional[int] , until : Optional[date] , since_id : Optional[int] , max_id : Optional[int] , include_entities : Optional[bool] , timeout : Optional[float] ) -> List[Mapping[str, Any]]","title":"Summary"},{"location":"api/jetblack_tweeter.api/#parameters_4","text":"q : str A UTF-8, URL-encoded search query of 500 characters maximum, including operators. Queries may additionally be limited by complexity. geocode : Optional[Tuple[Number, Number, str]] (optional) Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by \"latitude,longitude,radius\", where radius units must be specified as either \"mi\" (miles) or \"km\" (kilometers). Note that you cannot use the near operator via the API to geocode arbitrary locations; however you can use this geocode parameter to search near geocodes directly. A maximum of 1,000 distinct \"sub-regions\" will be considered when using the radius modifier. Defaults to None. lang : Optional[str] (optional) Restricts tweets to the given language, given by an ISO 639-1 code. Language detection is best-effort. Defaults to None. locale : Optional[str] (optional) Specify the language of the query you are sending (only ja is currently effective). This is intended for language-specific consumers and the default should work in the majority of cases. Defaults to None. result_type : Optional[SearchResultType] (optional) Specifies what type of search results you would prefer to receive. The current default is \"mixed\". Defaults to None. count : Optional[int] (optional) The number of tweets to return per page, 15 if unspecified, up to a maximum of 100. Defaults to None. until : Optional[date] (optional) Returns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Keep in mind that the search index has a 7-day limit. In other words, no tweets will be found for a date older than one week. Defaults to None. since_id : Optional[int] (optional) Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occurred since the since_id, the since_id will be forced to the oldest ID available. Defaults to None. max_id : Optional[int] (optional) Returns results with an ID less than (that is, older than) or equal to the specified ID. Defaults to None. include_entities : Optional[bool] (optional) The entities node will not be included when set to false. Defaults to None. timeout : Optional[float] (optional) If specified the timeout for the request. Defaults to None.","title":"Parameters"},{"location":"api/jetblack_tweeter.api/#returns_2","text":"List[Mapping[str, Any]] : A list of matching tweets.","title":"Returns"},{"location":"api/jetblack_tweeter.api/#class-statuses","text":"","title":"class Statuses"},{"location":"api/jetblack_tweeter.api/#summary_5","text":"Initialise the statuses end point. jetblack_tweeter.api . Statuses ( client : AbstractHttpClient ) -> None","title":"Summary"},{"location":"api/jetblack_tweeter.api/#parameters_5","text":"client : AbstractHttpClient THe authenticated HTTP client","title":"Parameters"},{"location":"api/jetblack_tweeter.api/#async-method-statusesdestroy","text":"","title":"async method Statuses.destroy"},{"location":"api/jetblack_tweeter.api/#summary_6","text":"Destroys the status specified by the required ID parameter. The","title":"Summary"},{"location":"api/jetblack_tweeter.api/#description_2","text":"authenticating user must be the author of the specified status. Returns the destroyed status if successful. async Statuses . destroy ( status_id : int , * , trim_user : Optional[bool] , timeout : Optional[float] ) -> Mapping[str, Any]","title":"Description"},{"location":"api/jetblack_tweeter.api/#parameters_6","text":"status_id : int The numerical ID of the desired status. trim_user : Optional[bool] (optional) When set true each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. Defaults to None. timeout : Optional[float] (optional) If specified the timeout for the request. Defaults to None.","title":"Parameters"},{"location":"api/jetblack_tweeter.api/#returns_3","text":"Mapping[str, Any] : THe deleted tweet.","title":"Returns"},{"location":"api/jetblack_tweeter.api/#async-method-statuseshome_timeline","text":"","title":"async method Statuses.home_timeline"},{"location":"api/jetblack_tweeter.api/#summary_7","text":"Returns a collection of the most recent Tweets and Retweets posted by","title":"Summary"},{"location":"api/jetblack_tweeter.api/#description_3","text":"the authenticating user and the users they follow. The home timeline is central to how most users interact with the Twitter service. async Statuses . home_timeline ( * , count : int , since_id : Optional[int] , max_id : Optional[int] , trim_user : bool , exclude_replies : bool , include_entities : bool , timeout : Optional[float] ) -> Mapping[str, Any]","title":"Description"},{"location":"api/jetblack_tweeter.api/#parameters_7","text":"count : int (optional) Specifies the number of records to retrieve. Must be less than or equal to 200. Defaults to 20. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. Defaults to 20. since_id : Optional[int] (optional) Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occurred since the since_id, the since_id will be forced to the oldest ID available. Defaults to None. max_id : Optional[int] (optional) Returns results with an ID less than (that is, older than) or equal to the specified ID. Defaults to None. trim_user : bool (optional) When true each Tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. Defaults to True. exclude_replies : bool (optional) This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count Tweets \u2014 this is because the count parameter retrieves that many Tweets before filtering out retweets and replies. Defaults to True. include_entities : bool (optional) The entities node will not be included when set to false. Defaults to False. timeout : Optional[float] (optional) If specified the timeout for the request. Defaults to None.","title":"Parameters"},{"location":"api/jetblack_tweeter.api/#returns_4","text":"Mapping[str, Any] : The user timeline.","title":"Returns"},{"location":"api/jetblack_tweeter.api/#async-method-statuseslookup","text":"","title":"async method Statuses.lookup"},{"location":"api/jetblack_tweeter.api/#summary_8","text":"Returns fully-hydrated Tweet objects for up to 100 Tweets per","title":"Summary"},{"location":"api/jetblack_tweeter.api/#description_4","text":"request, as specified by comma-separated values passed to the ids parameter. async Statuses . lookup ( ids : List[int] , * , include_entities : Optional[bool] , trim_user : Optional[bool] , map : Optional[bool] , include_ext_alt_text : Optional[bool] , include_card_uri : Optional[bool] , timeout : Optional[float] ) -> List[Mapping[str, Any]]","title":"Description"},{"location":"api/jetblack_tweeter.api/#parameters_8","text":"ids : List[int] A list of Tweet IDs, up to 100 are allowed in a single request. include_entities : Optional[bool] (optional) The entities node that may appear within embedded statuses will not be included when set to false. Defaults to None. trim_user : Optional[bool] (optional) When set to true each Tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. Defaults to None. map : Optional[bool] (optional) When using the map parameter, Tweets that do not exist or cannot be viewed by the current user will still have their key represented but with an explicitly null value paired with it. Defaults to None. include_ext_alt_text : Optional[bool] (optional) If alt text has been added to any attached media entities, this parameter will return an ext_alt_text value in the top-level key for the media entity. If no value has been set, this will be returned as null. Defaults to None. include_card_uri : Optional[bool] (optional) When set to true each Tweet returned will include a card_uri attribute when there is an ads card attached to the Tweet and when that card was attached using the card_uri value. Defaults to None. timeout : Optional[float] (optional) If specified the timeout for the request. Defaults to None.","title":"Parameters"},{"location":"api/jetblack_tweeter.api/#returns_5","text":"List[Mapping[str, Any]] : A list of tweets.","title":"Returns"},{"location":"api/jetblack_tweeter.api/#async-method-statusesmentions_timeline","text":"","title":"async method Statuses.mentions_timeline"},{"location":"api/jetblack_tweeter.api/#summary_9","text":"Returns the 20 most recent mentions (Tweets containing a users's","title":"Summary"},{"location":"api/jetblack_tweeter.api/#description_5","text":"@screen_name) for the authenticating user. async Statuses . mentions_timeline ( * , count : Optional[int] , since_id : Optional[int] , max_id : Optional[int] , trim_user : bool , include_entities : bool , timeout : Optional[float] ) -> List[Mapping[str, Any]]","title":"Description"},{"location":"api/jetblack_tweeter.api/#parameters_9","text":"count : Optional[int] (optional) Specifies the number of Tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method.. Defaults to None. since_id : Optional[int] (optional) Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occurred since the since_id, the since_id will be forced to the oldest ID available. Defaults to None. max_id : Optional[int] (optional) Returns results with an ID less than (that is, older than) or equal to the specified ID. Defaults to None. trim_user : bool (optional) When true each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. Defaults to True. include_entities : bool (optional) The entities node will not be included when set to false. Defaults to True. timeout : Optional[float] (optional) If specified the timeout for the request. Defaults to None.","title":"Parameters"},{"location":"api/jetblack_tweeter.api/#returns_6","text":"List[Mapping[str, Any]] : The mentions timeline.","title":"Returns"},{"location":"api/jetblack_tweeter.api/#async-method-statusesoembed","text":"","title":"async method Statuses.oembed"},{"location":"api/jetblack_tweeter.api/#summary_10","text":"Returns a single Tweet, specified by either a Tweet web URL or the","title":"Summary"},{"location":"api/jetblack_tweeter.api/#description_6","text":"Tweet ID, in an oEmbed-compatible format. async Statuses . oembed ( url : str , * , maxwidth : Optional[int] , hide_media : Optional[bool] , hide_thread : Optional[bool] , omit_script : Optional[bool] , align : Optional[Alignment] , related : Optional[List[str]] , lang : Optional[str] , theme : Optional[Theme] , link_color : Optional[str] , widget_type : Optional[WidgetType] , dnt : Optional[bool] , timeout : Optional[float] ) -> Mapping[str, Any]","title":"Description"},{"location":"api/jetblack_tweeter.api/#parameters_10","text":"url : str The URL of the Tweet to be embedded maxwidth : Optional[int] (optional) The maximum width of a rendered Tweet in whole pixels. A supplied value under or over the allowed range will be returned as the minimum or maximum supported width respectively; the reset width value will be reflected in the returned width property. Note that Twitter does not support the oEmbed maxheight parameter. Tweets are fundamentally text, and are therefore of unpredictable height that cannot be scaled like an image or video. Relatedly, the oEmbed response will not provide a value for height. Implementations that need consistent heights for Tweets should refer to the hide_thread and hide_media parameters below. Defaults to None. hide_media : Optional[bool] (optional) When set to true links in a Tweet are not expanded to photo, video, or link previews. Defaults to None. hide_thread : Optional[bool] (optional) When set to true a collapsed version of the previous Tweet in a conversation thread will not be displayed when the requested Tweet is in reply to another Tweet. Defaults to None. omit_script : Optional[bool] (optional) When set to true the","title":"Parameters"},{"location":"api/jetblack_tweeter.errors/","text":"class TweeterHttpError ( HTTPError ) \u00b6 Summary \u00b6 Initialise the error. jetblack_tweeter . TweeterHttpError ( url : str , status_code : int , headers : Mapping[str, str] , message : str ) -> None Parameters \u00b6 url : str The url that generated the error. status_code : int The status code that was returned. headers : Mapping[str, str] The headers that were returned. message : str The message supplied. property TweeterHttpError . headers \u00b6 headers -> Any headers : Any = ... property TweeterHttpError . reason \u00b6 reason -> Any property TweeterHttpError . status \u00b6 status -> Any method TweeterHttpError . close \u00b6 Summary \u00b6 Close the temporary file, possibly deleting it. TweeterHttpError . close ( ) -> Any Returns \u00b6 Any : method TweeterHttpError . getcode \u00b6 TweeterHttpError . getcode ( ) -> Any Returns \u00b6 Any : method TweeterHttpError . geturl \u00b6 TweeterHttpError . geturl ( ) -> Any Returns \u00b6 Any : method TweeterHttpError . info \u00b6 TweeterHttpError . info ( ) -> Any Returns \u00b6 Any : class StreamError ( TweeterHttpError ) \u00b6 Summary \u00b6 Initialise the stream error. jetblack_tweeter . StreamError ( url : str , status_code : int , headers : Mapping[str, str] ) -> None Parameters \u00b6 url : str The url that generated the error. status_code : int THe status code that was returned. headers : Mapping[str, str] THe headers that were returned. property StreamError . headers \u00b6 headers -> Any headers : Any = ... property StreamError . reason \u00b6 reason -> Any property StreamError . status \u00b6 status -> Any method StreamError . close \u00b6 Summary \u00b6 Close the temporary file, possibly deleting it. StreamError . close ( ) -> Any Returns \u00b6 Any : method StreamError . getcode \u00b6 StreamError . getcode ( ) -> Any Returns \u00b6 Any : method StreamError . geturl \u00b6 StreamError . geturl ( ) -> Any Returns \u00b6 Any : method StreamError . info \u00b6 StreamError . info ( ) -> Any Returns \u00b6 Any : class ApiError ( TweeterHttpError ) \u00b6 Summary \u00b6 Initialise the api error. jetblack_tweeter . ApiError ( url : str , status_code : int , headers : Mapping[str, str] ) -> None Parameters \u00b6 url : str The url that generated the error status_code : int The status code that was returned. headers : Mapping[str, str] The headers that were returned. property ApiError . headers \u00b6 headers -> Any headers : Any = ... property ApiError . reason \u00b6 reason -> Any property ApiError . status \u00b6 status -> Any method ApiError . close \u00b6 Summary \u00b6 Close the temporary file, possibly deleting it. ApiError . close ( ) -> Any Returns \u00b6 Any : method ApiError . getcode \u00b6 ApiError . getcode ( ) -> Any Returns \u00b6 Any : method ApiError . geturl \u00b6 ApiError . geturl ( ) -> Any Returns \u00b6 Any : method ApiError . info \u00b6 ApiError . info ( ) -> Any Returns \u00b6 Any :","title":"jetblack_tweeter.errors"},{"location":"api/jetblack_tweeter.errors/#class-tweeterhttperrorhttperror","text":"","title":"class TweeterHttpError(HTTPError)"},{"location":"api/jetblack_tweeter.errors/#summary","text":"Initialise the error. jetblack_tweeter . TweeterHttpError ( url : str , status_code : int , headers : Mapping[str, str] , message : str ) -> None","title":"Summary"},{"location":"api/jetblack_tweeter.errors/#parameters","text":"url : str The url that generated the error. status_code : int The status code that was returned. headers : Mapping[str, str] The headers that were returned. message : str The message supplied.","title":"Parameters"},{"location":"api/jetblack_tweeter.errors/#property-tweeterhttperrorheaders","text":"headers -> Any headers : Any = ...","title":"property TweeterHttpError.headers"},{"location":"api/jetblack_tweeter.errors/#property-tweeterhttperrorreason","text":"reason -> Any","title":"property TweeterHttpError.reason"},{"location":"api/jetblack_tweeter.errors/#property-tweeterhttperrorstatus","text":"status -> Any","title":"property TweeterHttpError.status"},{"location":"api/jetblack_tweeter.errors/#method-tweeterhttperrorclose","text":"","title":"method TweeterHttpError.close"},{"location":"api/jetblack_tweeter.errors/#summary_1","text":"Close the temporary file, possibly deleting it. TweeterHttpError . close ( ) -> Any","title":"Summary"},{"location":"api/jetblack_tweeter.errors/#returns","text":"Any :","title":"Returns"},{"location":"api/jetblack_tweeter.errors/#method-tweeterhttperrorgetcode","text":"TweeterHttpError . getcode ( ) -> Any","title":"method TweeterHttpError.getcode"},{"location":"api/jetblack_tweeter.errors/#returns_1","text":"Any :","title":"Returns"},{"location":"api/jetblack_tweeter.errors/#method-tweeterhttperrorgeturl","text":"TweeterHttpError . geturl ( ) -> Any","title":"method TweeterHttpError.geturl"},{"location":"api/jetblack_tweeter.errors/#returns_2","text":"Any :","title":"Returns"},{"location":"api/jetblack_tweeter.errors/#method-tweeterhttperrorinfo","text":"TweeterHttpError . info ( ) -> Any","title":"method TweeterHttpError.info"},{"location":"api/jetblack_tweeter.errors/#returns_3","text":"Any :","title":"Returns"},{"location":"api/jetblack_tweeter.errors/#class-streamerrortweeterhttperror","text":"","title":"class StreamError(TweeterHttpError)"},{"location":"api/jetblack_tweeter.errors/#summary_2","text":"Initialise the stream error. jetblack_tweeter . StreamError ( url : str , status_code : int , headers : Mapping[str, str] ) -> None","title":"Summary"},{"location":"api/jetblack_tweeter.errors/#parameters_1","text":"url : str The url that generated the error. status_code : int THe status code that was returned. headers : Mapping[str, str] THe headers that were returned.","title":"Parameters"},{"location":"api/jetblack_tweeter.errors/#property-streamerrorheaders","text":"headers -> Any headers : Any = ...","title":"property StreamError.headers"},{"location":"api/jetblack_tweeter.errors/#property-streamerrorreason","text":"reason -> Any","title":"property StreamError.reason"},{"location":"api/jetblack_tweeter.errors/#property-streamerrorstatus","text":"status -> Any","title":"property StreamError.status"},{"location":"api/jetblack_tweeter.errors/#method-streamerrorclose","text":"","title":"method StreamError.close"},{"location":"api/jetblack_tweeter.errors/#summary_3","text":"Close the temporary file, possibly deleting it. StreamError . close ( ) -> Any","title":"Summary"},{"location":"api/jetblack_tweeter.errors/#returns_4","text":"Any :","title":"Returns"},{"location":"api/jetblack_tweeter.errors/#method-streamerrorgetcode","text":"StreamError . getcode ( ) -> Any","title":"method StreamError.getcode"},{"location":"api/jetblack_tweeter.errors/#returns_5","text":"Any :","title":"Returns"},{"location":"api/jetblack_tweeter.errors/#method-streamerrorgeturl","text":"StreamError . geturl ( ) -> Any","title":"method StreamError.geturl"},{"location":"api/jetblack_tweeter.errors/#returns_6","text":"Any :","title":"Returns"},{"location":"api/jetblack_tweeter.errors/#method-streamerrorinfo","text":"StreamError . info ( ) -> Any","title":"method StreamError.info"},{"location":"api/jetblack_tweeter.errors/#returns_7","text":"Any :","title":"Returns"},{"location":"api/jetblack_tweeter.errors/#class-apierrortweeterhttperror","text":"","title":"class ApiError(TweeterHttpError)"},{"location":"api/jetblack_tweeter.errors/#summary_4","text":"Initialise the api error. jetblack_tweeter . ApiError ( url : str , status_code : int , headers : Mapping[str, str] ) -> None","title":"Summary"},{"location":"api/jetblack_tweeter.errors/#parameters_2","text":"url : str The url that generated the error status_code : int The status code that was returned. headers : Mapping[str, str] The headers that were returned.","title":"Parameters"},{"location":"api/jetblack_tweeter.errors/#property-apierrorheaders","text":"headers -> Any headers : Any = ...","title":"property ApiError.headers"},{"location":"api/jetblack_tweeter.errors/#property-apierrorreason","text":"reason -> Any","title":"property ApiError.reason"},{"location":"api/jetblack_tweeter.errors/#property-apierrorstatus","text":"status -> Any","title":"property ApiError.status"},{"location":"api/jetblack_tweeter.errors/#method-apierrorclose","text":"","title":"method ApiError.close"},{"location":"api/jetblack_tweeter.errors/#summary_5","text":"Close the temporary file, possibly deleting it. ApiError . close ( ) -> Any","title":"Summary"},{"location":"api/jetblack_tweeter.errors/#returns_8","text":"Any :","title":"Returns"},{"location":"api/jetblack_tweeter.errors/#method-apierrorgetcode","text":"ApiError . getcode ( ) -> Any","title":"method ApiError.getcode"},{"location":"api/jetblack_tweeter.errors/#returns_9","text":"Any :","title":"Returns"},{"location":"api/jetblack_tweeter.errors/#method-apierrorgeturl","text":"ApiError . geturl ( ) -> Any","title":"method ApiError.geturl"},{"location":"api/jetblack_tweeter.errors/#returns_10","text":"Any :","title":"Returns"},{"location":"api/jetblack_tweeter.errors/#method-apierrorinfo","text":"ApiError . info ( ) -> Any","title":"method ApiError.info"},{"location":"api/jetblack_tweeter.errors/#returns_11","text":"Any :","title":"Returns"},{"location":"api/jetblack_tweeter/","text":"class Tweeter \u00b6 Summary \u00b6 Initialise the Twitter client. jetblack_tweeter . Tweeter ( session : AbstractTweeterSession , app_key : str , app_key_secret : str , * , access_token : Optional[str] , access_token_secret : Optional[str] ) -> None Parameters \u00b6 session : AbstractTweeterSession The Twitter session implementation. app_key : str The app-key. app_key_secret : str The app-key-secret access_token : Optional[str] (optional) An optional access token. Defaults to None. access_token_secret : Optional[str] (optional) An optional access token secret. Defaults to None. Attributes \u00b6 account : Account Access to the account end point. search : Search Access to the search end point. statuses : Statuses Access to the statuses end point. stream : Stream Access to the stream end point. async method Tweeter . close \u00b6 Summary \u00b6 Close the tweeter. async Tweeter . close ( ) -> None class AuthenticatedHttpClient ( AbstractHttpClient ) \u00b6 Summary \u00b6 Initialise the authenticated HTTP client. jetblack_tweeter . AuthenticatedHttpClient ( tweeter_session : AbstractTweeterSession , consumer_key : str , consumer_secret : str , * , access_token : Optional[str] , access_token_secret : Optional[str] ) -> None Parameters \u00b6 tweeter_session : AbstractTweeterSession The tweeter session implementation. consumer_key : str THe OAuth1 consumer key consumer_secret : str The OAuth1 consumer secret. access_token : Optional[str] (optional) The OAuth1 access token. Defaults to None. access_token_secret : Optional[str] (optional) The Oauth1 access token secret. Defaults to None. async method AuthenticatedHttpClient . close \u00b6 Summary \u00b6 Close the connection. async AuthenticatedHttpClient . close ( ) -> Any Returns \u00b6 Any : async method AuthenticatedHttpClient . get \u00b6 Summary \u00b6 Gets data from Twitter. async AuthenticatedHttpClient . get ( url : str , params : Optional[Mapping[str, Any]] , timeout : Optional[float] ) -> Union[List[Any], Mapping[str, Any]] Parameters \u00b6 url : str The url. params : Optional[Mapping[str, Any]] (optional) The parameters if any. Defaults to None. timeout : Optional[float] (optional) The timeout if any. Defaults to None. Returns \u00b6 Union[List[Any], Mapping[str, Any]] : The unpacked JSON response. async method AuthenticatedHttpClient . post \u00b6 Summary \u00b6 Post data to Twitter. async AuthenticatedHttpClient . post ( url : str , params : Optional[Mapping[str, Any]] , timeout : Optional[float] ) -> Optional[Union[List[Any], Mapping[str, Any]]] Parameters \u00b6 url : str The url params : Optional[Mapping[str, Any]] (optional) The parameters if any. Defaults to None. timeout : Optional[float] (optional) The timeout if any. Defaults to None. Returns \u00b6 Optional[Union[List[Any], Mapping[str, Any]]] : The unpacked JSON response if any method AuthenticatedHttpClient . stream \u00b6 Summary \u00b6 Stream data from Twitter AuthenticatedHttpClient . stream ( url : str , data : Optional[Mapping[str, Any]] , method : str ) -> Coroutine[Any, Any, AsyncIterator[Union[List[Any], Mapping[str, Any]]]] Parameters \u00b6 url : str The url data : Optional[Mapping[str, Any]] (optional) The data. Defaults to None. method : str (optional) The HTTP method. Defaults to 'post'. Returns \u00b6 Coroutine[Any, Any, AsyncIterator[Union[List[Any], Mapping[str, Any]]]] : An async iterator of unpacked JSON responses.","title":"jetblack_tweeter"},{"location":"api/jetblack_tweeter/#class-tweeter","text":"","title":"class Tweeter"},{"location":"api/jetblack_tweeter/#summary","text":"Initialise the Twitter client. jetblack_tweeter . Tweeter ( session : AbstractTweeterSession , app_key : str , app_key_secret : str , * , access_token : Optional[str] , access_token_secret : Optional[str] ) -> None","title":"Summary"},{"location":"api/jetblack_tweeter/#parameters","text":"session : AbstractTweeterSession The Twitter session implementation. app_key : str The app-key. app_key_secret : str The app-key-secret access_token : Optional[str] (optional) An optional access token. Defaults to None. access_token_secret : Optional[str] (optional) An optional access token secret. Defaults to None.","title":"Parameters"},{"location":"api/jetblack_tweeter/#attributes","text":"account : Account Access to the account end point. search : Search Access to the search end point. statuses : Statuses Access to the statuses end point. stream : Stream Access to the stream end point.","title":"Attributes"},{"location":"api/jetblack_tweeter/#async-method-tweeterclose","text":"","title":"async method Tweeter.close"},{"location":"api/jetblack_tweeter/#summary_1","text":"Close the tweeter. async Tweeter . close ( ) -> None","title":"Summary"},{"location":"api/jetblack_tweeter/#class-authenticatedhttpclientabstracthttpclient","text":"","title":"class AuthenticatedHttpClient(AbstractHttpClient)"},{"location":"api/jetblack_tweeter/#summary_2","text":"Initialise the authenticated HTTP client. jetblack_tweeter . AuthenticatedHttpClient ( tweeter_session : AbstractTweeterSession , consumer_key : str , consumer_secret : str , * , access_token : Optional[str] , access_token_secret : Optional[str] ) -> None","title":"Summary"},{"location":"api/jetblack_tweeter/#parameters_1","text":"tweeter_session : AbstractTweeterSession The tweeter session implementation. consumer_key : str THe OAuth1 consumer key consumer_secret : str The OAuth1 consumer secret. access_token : Optional[str] (optional) The OAuth1 access token. Defaults to None. access_token_secret : Optional[str] (optional) The Oauth1 access token secret. Defaults to None.","title":"Parameters"},{"location":"api/jetblack_tweeter/#async-method-authenticatedhttpclientclose","text":"","title":"async method AuthenticatedHttpClient.close"},{"location":"api/jetblack_tweeter/#summary_3","text":"Close the connection. async AuthenticatedHttpClient . close ( ) -> Any","title":"Summary"},{"location":"api/jetblack_tweeter/#returns","text":"Any :","title":"Returns"},{"location":"api/jetblack_tweeter/#async-method-authenticatedhttpclientget","text":"","title":"async method AuthenticatedHttpClient.get"},{"location":"api/jetblack_tweeter/#summary_4","text":"Gets data from Twitter. async AuthenticatedHttpClient . get ( url : str , params : Optional[Mapping[str, Any]] , timeout : Optional[float] ) -> Union[List[Any], Mapping[str, Any]]","title":"Summary"},{"location":"api/jetblack_tweeter/#parameters_2","text":"url : str The url. params : Optional[Mapping[str, Any]] (optional) The parameters if any. Defaults to None. timeout : Optional[float] (optional) The timeout if any. Defaults to None.","title":"Parameters"},{"location":"api/jetblack_tweeter/#returns_1","text":"Union[List[Any], Mapping[str, Any]] : The unpacked JSON response.","title":"Returns"},{"location":"api/jetblack_tweeter/#async-method-authenticatedhttpclientpost","text":"","title":"async method AuthenticatedHttpClient.post"},{"location":"api/jetblack_tweeter/#summary_5","text":"Post data to Twitter. async AuthenticatedHttpClient . post ( url : str , params : Optional[Mapping[str, Any]] , timeout : Optional[float] ) -> Optional[Union[List[Any], Mapping[str, Any]]]","title":"Summary"},{"location":"api/jetblack_tweeter/#parameters_3","text":"url : str The url params : Optional[Mapping[str, Any]] (optional) The parameters if any. Defaults to None. timeout : Optional[float] (optional) The timeout if any. Defaults to None.","title":"Parameters"},{"location":"api/jetblack_tweeter/#returns_2","text":"Optional[Union[List[Any], Mapping[str, Any]]] : The unpacked JSON response if any","title":"Returns"},{"location":"api/jetblack_tweeter/#method-authenticatedhttpclientstream","text":"","title":"method AuthenticatedHttpClient.stream"},{"location":"api/jetblack_tweeter/#summary_6","text":"Stream data from Twitter AuthenticatedHttpClient . stream ( url : str , data : Optional[Mapping[str, Any]] , method : str ) -> Coroutine[Any, Any, AsyncIterator[Union[List[Any], Mapping[str, Any]]]]","title":"Summary"},{"location":"api/jetblack_tweeter/#parameters_4","text":"url : str The url data : Optional[Mapping[str, Any]] (optional) The data. Defaults to None. method : str (optional) The HTTP method. Defaults to 'post'.","title":"Parameters"},{"location":"api/jetblack_tweeter/#returns_3","text":"Coroutine[Any, Any, AsyncIterator[Union[List[Any], Mapping[str, Any]]]] : An async iterator of unpacked JSON responses.","title":"Returns"},{"location":"api/jetblack_tweeter.types/","text":"class AbstractTweeterSession \u00b6 Summary \u00b6 The abstract class for Tweeter sessions. Description \u00b6 Implement this class to provide clients for the http library of your choice. jetblack_tweeter . AbstractTweeterSession ( ) -> None async method AbstractTweeterSession . close \u00b6 Summary \u00b6 Close the connection. async AbstractTweeterSession . close ( ) -> Any Returns \u00b6 Any : async method AbstractTweeterSession . get \u00b6 Summary \u00b6 Get data from Twitter async AbstractTweeterSession . get ( url : str , headers : Mapping[str, str] , timeout : Optional[float] ) -> Union[List[Any], Mapping[str, Any]] Parameters \u00b6 url : str The url headers : Mapping[str, str] The HTTP headers. timeout : Optional[float] An optional timeout. Returns \u00b6 Union[List[Any], Mapping[str, Any]] : The unpacked JSON response. async method AbstractTweeterSession . post \u00b6 Summary \u00b6 Post data to Twitter async AbstractTweeterSession . post ( url : str , headers : Mapping[str, str] , body : Optional[str] , timeout : Optional[float] ) -> Optional[Union[List[Any], Mapping[str, Any]]] Parameters \u00b6 url : str The url headers : Mapping[str, str] The HTTP headers. body : Optional[str] The body (if any). timeout : Optional[float] An optional timeout. Returns \u00b6 Optional[Union[List[Any], Mapping[str, Any]]] : The unpacked JSON response (if any). method AbstractTweeterSession . stream \u00b6 Summary \u00b6 Stream data AbstractTweeterSession . stream ( url : str , method : str , headers : Mapping[str, str] , body : Optional[str] ) -> AsyncIterator[Union[List[Any], Mapping[str, Any]]] Parameters \u00b6 url : str The url method : str The HTTP method headers : Mapping[str, str] The HTTP headers body : Optional[str] The body (if any) Returns \u00b6 AsyncIterator[Union[List[Any], Mapping[str, Any]]] : An async iterator of the unpacked JSON message. class AbstractHttpClient \u00b6 Summary \u00b6 The abstract class for HTTP clients. jetblack_tweeter . AbstractHttpClient ( ) -> None async method AbstractHttpClient . close \u00b6 Summary \u00b6 Close the connection. async AbstractHttpClient . close ( ) -> Any Returns \u00b6 Any : async method AbstractHttpClient . get \u00b6 Summary \u00b6 Gets data from Twitter. async AbstractHttpClient . get ( url : str , params : Optional[Mapping[str, Any]] , timeout : Optional[float] ) -> Union[List[Any], Mapping[str, Any]] Parameters \u00b6 url : str The url. params : Optional[Mapping[str, Any]] (optional) The parameters if any. Defaults to None. timeout : Optional[float] (optional) The timeout if any. Defaults to None. Returns \u00b6 Union[List[Any], Mapping[str, Any]] : The unpacked JSON response. async method AbstractHttpClient . post \u00b6 Summary \u00b6 Post data to Twitter. async AbstractHttpClient . post ( url : str , params : Optional[Mapping[str, Any]] , timeout : Optional[float] ) -> Optional[Union[List[Any], Mapping[str, Any]]] Parameters \u00b6 url : str The url params : Optional[Mapping[str, Any]] (optional) The parameters if any. Defaults to None. timeout : Optional[float] (optional) The timeout if any. Defaults to None. Returns \u00b6 Optional[Union[List[Any], Mapping[str, Any]]] : The unpacked JSON response if any method AbstractHttpClient . stream \u00b6 Summary \u00b6 Stream data from Twitter AbstractHttpClient . stream ( url : str , data : Optional[Mapping[str, Any]] , method : str ) -> Coroutine[Any, Any, AsyncIterator[Union[List[Any], Mapping[str, Any]]]] Parameters \u00b6 url : str The url data : Optional[Mapping[str, Any]] (optional) The data. Defaults to None. method : str (optional) The HTTP method. Defaults to 'post'. Returns \u00b6 Coroutine[Any, Any, AsyncIterator[Union[List[Any], Mapping[str, Any]]]] : An async iterator of unpacked JSON responses.","title":"jetblack_tweeter.types"},{"location":"api/jetblack_tweeter.types/#class-abstracttweetersession","text":"","title":"class AbstractTweeterSession"},{"location":"api/jetblack_tweeter.types/#summary","text":"The abstract class for Tweeter sessions.","title":"Summary"},{"location":"api/jetblack_tweeter.types/#description","text":"Implement this class to provide clients for the http library of your choice. jetblack_tweeter . AbstractTweeterSession ( ) -> None","title":"Description"},{"location":"api/jetblack_tweeter.types/#async-method-abstracttweetersessionclose","text":"","title":"async method AbstractTweeterSession.close"},{"location":"api/jetblack_tweeter.types/#summary_1","text":"Close the connection. async AbstractTweeterSession . close ( ) -> Any","title":"Summary"},{"location":"api/jetblack_tweeter.types/#returns","text":"Any :","title":"Returns"},{"location":"api/jetblack_tweeter.types/#async-method-abstracttweetersessionget","text":"","title":"async method AbstractTweeterSession.get"},{"location":"api/jetblack_tweeter.types/#summary_2","text":"Get data from Twitter async AbstractTweeterSession . get ( url : str , headers : Mapping[str, str] , timeout : Optional[float] ) -> Union[List[Any], Mapping[str, Any]]","title":"Summary"},{"location":"api/jetblack_tweeter.types/#parameters","text":"url : str The url headers : Mapping[str, str] The HTTP headers. timeout : Optional[float] An optional timeout.","title":"Parameters"},{"location":"api/jetblack_tweeter.types/#returns_1","text":"Union[List[Any], Mapping[str, Any]] : The unpacked JSON response.","title":"Returns"},{"location":"api/jetblack_tweeter.types/#async-method-abstracttweetersessionpost","text":"","title":"async method AbstractTweeterSession.post"},{"location":"api/jetblack_tweeter.types/#summary_3","text":"Post data to Twitter async AbstractTweeterSession . post ( url : str , headers : Mapping[str, str] , body : Optional[str] , timeout : Optional[float] ) -> Optional[Union[List[Any], Mapping[str, Any]]]","title":"Summary"},{"location":"api/jetblack_tweeter.types/#parameters_1","text":"url : str The url headers : Mapping[str, str] The HTTP headers. body : Optional[str] The body (if any). timeout : Optional[float] An optional timeout.","title":"Parameters"},{"location":"api/jetblack_tweeter.types/#returns_2","text":"Optional[Union[List[Any], Mapping[str, Any]]] : The unpacked JSON response (if any).","title":"Returns"},{"location":"api/jetblack_tweeter.types/#method-abstracttweetersessionstream","text":"","title":"method AbstractTweeterSession.stream"},{"location":"api/jetblack_tweeter.types/#summary_4","text":"Stream data AbstractTweeterSession . stream ( url : str , method : str , headers : Mapping[str, str] , body : Optional[str] ) -> AsyncIterator[Union[List[Any], Mapping[str, Any]]]","title":"Summary"},{"location":"api/jetblack_tweeter.types/#parameters_2","text":"url : str The url method : str The HTTP method headers : Mapping[str, str] The HTTP headers body : Optional[str] The body (if any)","title":"Parameters"},{"location":"api/jetblack_tweeter.types/#returns_3","text":"AsyncIterator[Union[List[Any], Mapping[str, Any]]] : An async iterator of the unpacked JSON message.","title":"Returns"},{"location":"api/jetblack_tweeter.types/#class-abstracthttpclient","text":"","title":"class AbstractHttpClient"},{"location":"api/jetblack_tweeter.types/#summary_5","text":"The abstract class for HTTP clients. jetblack_tweeter . AbstractHttpClient ( ) -> None","title":"Summary"},{"location":"api/jetblack_tweeter.types/#async-method-abstracthttpclientclose","text":"","title":"async method AbstractHttpClient.close"},{"location":"api/jetblack_tweeter.types/#summary_6","text":"Close the connection. async AbstractHttpClient . close ( ) -> Any","title":"Summary"},{"location":"api/jetblack_tweeter.types/#returns_4","text":"Any :","title":"Returns"},{"location":"api/jetblack_tweeter.types/#async-method-abstracthttpclientget","text":"","title":"async method AbstractHttpClient.get"},{"location":"api/jetblack_tweeter.types/#summary_7","text":"Gets data from Twitter. async AbstractHttpClient . get ( url : str , params : Optional[Mapping[str, Any]] , timeout : Optional[float] ) -> Union[List[Any], Mapping[str, Any]]","title":"Summary"},{"location":"api/jetblack_tweeter.types/#parameters_3","text":"url : str The url. params : Optional[Mapping[str, Any]] (optional) The parameters if any. Defaults to None. timeout : Optional[float] (optional) The timeout if any. Defaults to None.","title":"Parameters"},{"location":"api/jetblack_tweeter.types/#returns_5","text":"Union[List[Any], Mapping[str, Any]] : The unpacked JSON response.","title":"Returns"},{"location":"api/jetblack_tweeter.types/#async-method-abstracthttpclientpost","text":"","title":"async method AbstractHttpClient.post"},{"location":"api/jetblack_tweeter.types/#summary_8","text":"Post data to Twitter. async AbstractHttpClient . post ( url : str , params : Optional[Mapping[str, Any]] , timeout : Optional[float] ) -> Optional[Union[List[Any], Mapping[str, Any]]]","title":"Summary"},{"location":"api/jetblack_tweeter.types/#parameters_4","text":"url : str The url params : Optional[Mapping[str, Any]] (optional) The parameters if any. Defaults to None. timeout : Optional[float] (optional) The timeout if any. Defaults to None.","title":"Parameters"},{"location":"api/jetblack_tweeter.types/#returns_6","text":"Optional[Union[List[Any], Mapping[str, Any]]] : The unpacked JSON response if any","title":"Returns"},{"location":"api/jetblack_tweeter.types/#method-abstracthttpclientstream","text":"","title":"method AbstractHttpClient.stream"},{"location":"api/jetblack_tweeter.types/#summary_9","text":"Stream data from Twitter AbstractHttpClient . stream ( url : str , data : Optional[Mapping[str, Any]] , method : str ) -> Coroutine[Any, Any, AsyncIterator[Union[List[Any], Mapping[str, Any]]]]","title":"Summary"},{"location":"api/jetblack_tweeter.types/#parameters_5","text":"url : str The url data : Optional[Mapping[str, Any]] (optional) The data. Defaults to None. method : str (optional) The HTTP method. Defaults to 'post'.","title":"Parameters"},{"location":"api/jetblack_tweeter.types/#returns_7","text":"Coroutine[Any, Any, AsyncIterator[Union[List[Any], Mapping[str, Any]]]] : An async iterator of unpacked JSON responses.","title":"Returns"},{"location":"user-guide/getting-started/","text":"Getting Started \u00b6 Example \u00b6 Here is an example: import asyncio import os from jetblack_tweeter import Tweeter from jetblack_tweeter.clients.bareclient import BareTweeterSession # Get the secrets from environment variables. APP_KEY = os . environ [ \"APP_KEY\" ] APP_KEY_SECRET = os . environ [ \"APP_KEY_SECRET\" ] ACCESS_TOKEN = os . environ [ \"ACCESS_TOKEN\" ] ACCESS_TOKEN_SECRET = os . environ [ \"ACCESS_TOKEN_SECRET\" ] async def main (): tweeter = Tweeter ( BareTweeterSession (), APP_KEY , APP_KEY_SECRET , # Optional for user authentication. access_token = ACCESS_TOKEN , access_token_secret = ACCESS_TOKEN_SECRET ) user_timeline = await tweeter . statuses . user_timeline () print ( user_timeline ) account_settings = await tweeter . account . settings () print ( account_settings ) account_verify_credentials = await tweeter . account . verify_credentials () print ( account_verify_credentials ) # Watch the random sampling of tweets chosen by twitter async for tweet in tweeter . stream . sample (): print ( tweet ) # Stream tweets which have the tag \"#python\" from New York # and San Francisco. async for tweet in tweeter . stream . filter ( track = [ '#python' ], locations = [ (( - 122.75 , 36.8 ), ( - 121.75 , 37.8 )), (( - 74 , 40 ), ( - 73 , 41 )) ] ): print ( tweet ) result = await tweeter . statuses . update ( 'Hello from jetblack-tweeter' ) print ( result ) # Close the tweeter. await tweeter . close () if __name__ == '__main__' : asyncio . run ( main ()) Context Management \u00b6 This example uses aiohttp with context management. import asyncio import os from jetblack_tweeter import Tweeter from jetblack_tweeter.clients.aiohttp import AiohttpTweeterSession async def main (): async with Tweeter ( AiohttpTweeterSession (), os . environ [ \"APP_KEY\" ], os . environ [ \"APP_KEY_SECRET\" ], access_token = os . environ [ \"ACCESS_TOKEN\" ], access_token_secret = os . environ [ \"ACCESS_TOKEN_SECRET\" ] ) as tweeter : user_timeline = await tweeter . statuses . user_timeline () print ( user_timeline ) if __name__ == '__main__' : asyncio . run ( main ())","title":"Getting Started"},{"location":"user-guide/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"user-guide/getting-started/#example","text":"Here is an example: import asyncio import os from jetblack_tweeter import Tweeter from jetblack_tweeter.clients.bareclient import BareTweeterSession # Get the secrets from environment variables. APP_KEY = os . environ [ \"APP_KEY\" ] APP_KEY_SECRET = os . environ [ \"APP_KEY_SECRET\" ] ACCESS_TOKEN = os . environ [ \"ACCESS_TOKEN\" ] ACCESS_TOKEN_SECRET = os . environ [ \"ACCESS_TOKEN_SECRET\" ] async def main (): tweeter = Tweeter ( BareTweeterSession (), APP_KEY , APP_KEY_SECRET , # Optional for user authentication. access_token = ACCESS_TOKEN , access_token_secret = ACCESS_TOKEN_SECRET ) user_timeline = await tweeter . statuses . user_timeline () print ( user_timeline ) account_settings = await tweeter . account . settings () print ( account_settings ) account_verify_credentials = await tweeter . account . verify_credentials () print ( account_verify_credentials ) # Watch the random sampling of tweets chosen by twitter async for tweet in tweeter . stream . sample (): print ( tweet ) # Stream tweets which have the tag \"#python\" from New York # and San Francisco. async for tweet in tweeter . stream . filter ( track = [ '#python' ], locations = [ (( - 122.75 , 36.8 ), ( - 121.75 , 37.8 )), (( - 74 , 40 ), ( - 73 , 41 )) ] ): print ( tweet ) result = await tweeter . statuses . update ( 'Hello from jetblack-tweeter' ) print ( result ) # Close the tweeter. await tweeter . close () if __name__ == '__main__' : asyncio . run ( main ())","title":"Example"},{"location":"user-guide/getting-started/#context-management","text":"This example uses aiohttp with context management. import asyncio import os from jetblack_tweeter import Tweeter from jetblack_tweeter.clients.aiohttp import AiohttpTweeterSession async def main (): async with Tweeter ( AiohttpTweeterSession (), os . environ [ \"APP_KEY\" ], os . environ [ \"APP_KEY_SECRET\" ], access_token = os . environ [ \"ACCESS_TOKEN\" ], access_token_secret = os . environ [ \"ACCESS_TOKEN_SECRET\" ] ) as tweeter : user_timeline = await tweeter . statuses . user_timeline () print ( user_timeline ) if __name__ == '__main__' : asyncio . run ( main ())","title":"Context Management"},{"location":"user-guide/installation/","text":"Installation \u00b6 Install with pip , specifying the HTTP backend you wish to use. For bareClient: pip install jetblack-tweeter [ bareclient ] For aiohttp: pip install jetblack-tweeter [ aiohttp ] You must specify an HTTP client backend.","title":"Installation"},{"location":"user-guide/installation/#installation","text":"Install with pip , specifying the HTTP backend you wish to use. For bareClient: pip install jetblack-tweeter [ bareclient ] For aiohttp: pip install jetblack-tweeter [ aiohttp ] You must specify an HTTP client backend.","title":"Installation"}]}